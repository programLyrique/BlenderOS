
Allocating common symbols
Common symbol       size              file

stack               0x4000            bin/start.o

Memory Configuration

Name             Origin             Length             Attributes
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

                0x0000000000200000                . = 0x200000
                0x0000000000200000                . = .
                0x0000000000200000                __b_load = .

.multiboot      0x0000000000200000       0x23
 *(.multiboot)
 .multiboot     0x0000000000200000       0x23 bin/start.o
                0x0000000000200000                _start
                0x0000000000200000                start
                0x0000000000200023                . = .
                0x0000000000200023                __b_kernel = .

.text           0x0000000000200024      0x9f7
 *(.text)
 .text          0x0000000000200024        0x0 bin/gdt.o
 .text          0x0000000000200024       0x92 bin/kernel.o
                0x0000000000200024                kmain
 *fill*         0x00000000002000b6        0x2 00
 .text          0x00000000002000b8      0x18f bin/multiboot.o
                0x00000000002000b8                init_multiboot_info
                0x00000000002000f9                get_multiboot_info
                0x0000000000200103                get_mem
                0x000000000020012d                get_boot_device
                0x0000000000200159                get_cmdline
                0x0000000000200176                get_nbModules
                0x0000000000200193                get_modules
                0x00000000002001b0                get_mmap_length
                0x00000000002001cd                get_mmap
                0x00000000002001ea                get_drives_length
                0x0000000000200209                get_drive
                0x0000000000200228                get_config_table
 *fill*         0x0000000000200247        0x1 00
 .text          0x0000000000200248      0x335 bin/printk.o
                0x0000000000200248                printk
 *fill*         0x000000000020057d        0x3 00
 .text          0x0000000000200580      0x1b3 bin/screen.o
                0x0000000000200580                cls
                0x00000000002005a0                scrollup
                0x000000000020060f                putchar
                0x00000000002006eb                setAttribute
 *fill*         0x0000000000200733        0x1 00
 .text          0x0000000000200734        0x0 bin/start.o
 .text          0x0000000000200734      0x2e7 bin/string.o
                0x0000000000200734                memcpy
                0x000000000020082e                memset
                0x0000000000200944                itoa
                0x00000000002009f0                strlen
                0x0000000000200a1b                PROVIDE (_etext, .)

.iplt           0x0000000000200a1c        0x0 load address 0x0000000000200a1b
 .iplt          0x0000000000000000        0x0 bin/kernel.o

.data           0x0000000000200a1c        0x8
 *(.data)
 .data          0x0000000000200a1c        0x0 bin/gdt.o
 .data          0x0000000000200a1c        0x0 bin/kernel.o
 .data          0x0000000000200a1c        0x0 bin/multiboot.o
 .data          0x0000000000200a1c        0x0 bin/printk.o
 .data          0x0000000000200a1c        0x8 bin/screen.o
 .data          0x0000000000200a24        0x0 bin/start.o
 .data          0x0000000000200a24        0x0 bin/string.o
                0x0000000000200a24                PROVIDE (_edata, .)

.igot.plt       0x0000000000200a24        0x0
 .igot.plt      0x0000000000000000        0x0 bin/kernel.o

.rodata         0x0000000000200a24       0xbe
 *(.rodata)
 .rodata        0x0000000000200a24       0xb5 bin/kernel.o
 .rodata        0x0000000000200ad9        0x9 bin/printk.o
                0x0000000000200ae2                PROVIDE (_rodata, .)

.rel.dyn        0x0000000000200ae4        0x0 load address 0x0000000000200ae2
 .rel.iplt      0x0000000000000000        0x0 bin/kernel.o
 .rel.text      0x0000000000000000        0x0 bin/kernel.o
                0x0000000000200ae4                . = .
                0x0000000000200ae4                __e_load = .

.bss            0x0000000000200b00     0x40c0
 *(.bss)
 .bss           0x0000000000200b00        0x0 bin/gdt.o
 .bss           0x0000000000200b00       0x58 bin/kernel.o
 *fill*         0x0000000000200b58        0x8 00
 .bss           0x0000000000200b60       0x58 bin/multiboot.o
 .bss           0x0000000000200bb8        0x0 bin/printk.o
 .bss           0x0000000000200bb8        0x8 bin/screen.o
 .bss           0x0000000000200bc0        0x0 bin/start.o
 .bss           0x0000000000200bc0        0x0 bin/string.o
                0x0000000000200bc0                PROVIDE (_ebss, .)
 COMMON         0x0000000000200bc0     0x4000 bin/start.o
                0x0000000000200bc0                stack
                0x0000000000204bc0                ___e_kernel = .

.note.GNU-stack
                0x0000000000000000        0x0
 .note.GNU-stack
                0x0000000000000000        0x0 bin/gdt.o
 .note.GNU-stack
                0x0000000000000000        0x0 bin/kernel.o
 .note.GNU-stack
                0x0000000000000000        0x0 bin/multiboot.o
 .note.GNU-stack
                0x0000000000000000        0x0 bin/printk.o
 .note.GNU-stack
                0x0000000000000000        0x0 bin/screen.o
 .note.GNU-stack
                0x0000000000000000        0x0 bin/string.o

.comment        0x0000000000204bc0       0x22
 *(.comment)
 .comment       0x0000000000204bc0       0x22 bin/gdt.o
                                         0x23 (size before relaxing)
 .comment       0x0000000000000000       0x23 bin/kernel.o
 .comment       0x0000000000000000       0x23 bin/multiboot.o
 .comment       0x0000000000000000       0x23 bin/printk.o
 .comment       0x0000000000000000       0x23 bin/screen.o
 .comment       0x0000000000000000       0x23 bin/string.o
LOAD bin/gdt.o
LOAD bin/kernel.o
LOAD bin/multiboot.o
LOAD bin/printk.o
LOAD bin/screen.o
LOAD bin/start.o
LOAD bin/string.o
OUTPUT(BlenderOS_Kernel elf32-i386)
